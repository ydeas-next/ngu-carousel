export class NguCarouselStore {
    constructor(touch = new Touch(), vertical = new Vertical(), interval, transform = new Transfrom(), button, visibleItems, deviceType, type = 'fixed', token = '', items = 0, load = 0, deviceWidth = 0, carouselWidth = 0, itemWidth = 0, slideItems = 0, itemWidthPer = 0, itemLength = 0, currentSlide = 0, easing = 'cubic-bezier(0, 0, 0.2, 1)', speed = 200, loop = false, dexVal = 0, touchTransform = 0, isEnd = false, isFirst = true, isLast = false, RTL = false, point = true, velocity = 1) {
        this.touch = touch;
        this.vertical = vertical;
        this.interval = interval;
        this.transform = transform;
        this.button = button;
        this.visibleItems = visibleItems;
        this.deviceType = deviceType;
        this.type = type;
        this.token = token;
        this.items = items;
        this.load = load;
        this.deviceWidth = deviceWidth;
        this.carouselWidth = carouselWidth;
        this.itemWidth = itemWidth;
        this.slideItems = slideItems;
        this.itemWidthPer = itemWidthPer;
        this.itemLength = itemLength;
        this.currentSlide = currentSlide;
        this.easing = easing;
        this.speed = speed;
        this.loop = loop;
        this.dexVal = dexVal;
        this.touchTransform = touchTransform;
        this.isEnd = isEnd;
        this.isFirst = isFirst;
        this.isLast = isLast;
        this.RTL = RTL;
        this.point = point;
        this.velocity = velocity;
    }
}
export class ItemsControl {
}
export class Vertical {
}
export class NguButton {
}
export class Touch {
}
export class Transfrom {
    constructor(xs = 0, sm = 0, md = 0, lg = 0, all = 0) {
        this.xs = xs;
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.all = all;
        this.xl = 0;
    }
}
/**
 * Default values
 * {sm: 768, md: 992, lg: 1200, xl: 1200}
 *
 * Bootstrap values:
 * {sm: 576, md: 768, lg: 992, xl: 1200}
 */
export class Breakpoints {
    constructor(sm = 768, md = 992, lg = 1200, xl = 1200) {
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.xl = xl;
    }
}
export class NguCarouselConfig {
}
export class NguCarouselOutletContext {
    constructor(data) {
        this.$implicit = data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd1LWNhcm91c2VsL3NyYy9saWIvbmd1LWNhcm91c2VsL25ndS1jYXJvdXNlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFlBQ1MsUUFBUSxJQUFJLEtBQUssRUFBRSxFQUNuQixXQUFXLElBQUksUUFBUSxFQUFFLEVBQ3pCLFFBQTJCLEVBQzNCLFlBQVksSUFBSSxTQUFTLEVBQUUsRUFDM0IsTUFBa0IsRUFDbEIsWUFBMkIsRUFDM0IsVUFBdUIsRUFDdkIsT0FBTyxPQUFPLEVBQ2QsUUFBUSxFQUFFLEVBQ1YsUUFBUSxDQUFDLEVBQ1QsT0FBTyxDQUFDLEVBQ1IsY0FBYyxDQUFDLEVBQ2YsZ0JBQWdCLENBQUMsRUFDakIsWUFBWSxDQUFDLEVBQ2IsYUFBYSxDQUFDLEVBQ2QsZUFBZSxDQUFDLEVBQ2hCLGFBQWEsQ0FBQyxFQUNkLGVBQWUsQ0FBQyxFQUNoQixTQUFTLDRCQUE0QixFQUNyQyxRQUFRLEdBQUcsRUFDWCxPQUFPLEtBQUssRUFDWixTQUFTLENBQUMsRUFDVixpQkFBaUIsQ0FBQyxFQUNsQixRQUFRLEtBQUssRUFDYixVQUFVLElBQUksRUFDZCxTQUFTLEtBQUssRUFDZCxNQUFNLEtBQUssRUFDWCxRQUFRLElBQUksRUFDWixXQUFXLENBQUM7UUE1QlosVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUMzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFlO1FBQzNCLGVBQVUsR0FBVixVQUFVLENBQWE7UUFDdkIsU0FBSSxHQUFKLElBQUksQ0FBVTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQUs7UUFDVixVQUFLLEdBQUwsS0FBSyxDQUFJO1FBQ1QsU0FBSSxHQUFKLElBQUksQ0FBSTtRQUNSLGdCQUFXLEdBQVgsV0FBVyxDQUFJO1FBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQUk7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUNiLGVBQVUsR0FBVixVQUFVLENBQUk7UUFDZCxpQkFBWSxHQUFaLFlBQVksQ0FBSTtRQUNoQixlQUFVLEdBQVYsVUFBVSxDQUFJO1FBQ2QsaUJBQVksR0FBWixZQUFZLENBQUk7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBK0I7UUFDckMsVUFBSyxHQUFMLEtBQUssQ0FBTTtRQUNYLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFJO1FBQ1YsbUJBQWMsR0FBZCxjQUFjLENBQUk7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQU87UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFVBQUssR0FBTCxLQUFLLENBQU87UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQ2xCLENBQUM7Q0FDTDtBQUtELE1BQU0sT0FBTyxZQUFZO0NBR3hCO0FBRUQsTUFBTSxPQUFPLFFBQVE7Q0FJcEI7QUFFRCxNQUFNLE9BQU8sU0FBUztDQUdyQjtBQUVELE1BQU0sT0FBTyxLQUFLO0NBSWpCO0FBYUQsTUFBTSxPQUFPLFNBQVM7SUFFcEIsWUFBbUIsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsTUFBTSxDQUFDO1FBQW5FLE9BQUUsR0FBRixFQUFFLENBQUk7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFJO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBSTtRQUFTLE9BQUUsR0FBRixFQUFFLENBQUk7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFJO1FBRC9FLE9BQUUsR0FBSSxDQUFDLENBQUM7SUFDMEUsQ0FBQztDQUMzRjtBQVdEOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQW1CLEtBQUssR0FBRyxFQUFTLEtBQUssR0FBRyxFQUFTLEtBQUssSUFBSSxFQUFTLEtBQUssSUFBSTtRQUE3RCxPQUFFLEdBQUYsRUFBRSxDQUFNO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBTTtRQUFTLE9BQUUsR0FBRixFQUFFLENBQU87UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFPO0lBQUcsQ0FBQztDQUNyRjtBQUVELE1BQU0sT0FBTyxpQkFBaUI7Q0FrQjdCO0FBMkJELE1BQU0sT0FBTyx3QkFBd0I7SUFhbkMsWUFBWSxJQUFPO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbFN0b3JlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHRvdWNoID0gbmV3IFRvdWNoKCksXG4gICAgcHVibGljIHZlcnRpY2FsID0gbmV3IFZlcnRpY2FsKCksXG4gICAgcHVibGljIGludGVydmFsPzogQ2Fyb3VzZWxJbnRlcnZhbCxcbiAgICBwdWJsaWMgdHJhbnNmb3JtID0gbmV3IFRyYW5zZnJvbSgpLFxuICAgIHB1YmxpYyBidXR0b24/OiBOZ3VCdXR0b24sXG4gICAgcHVibGljIHZpc2libGVJdGVtcz86IEl0ZW1zQ29udHJvbCxcbiAgICBwdWJsaWMgZGV2aWNlVHlwZT86IERldmljZVR5cGUsXG4gICAgcHVibGljIHR5cGUgPSAnZml4ZWQnLFxuICAgIHB1YmxpYyB0b2tlbiA9ICcnLFxuICAgIHB1YmxpYyBpdGVtcyA9IDAsXG4gICAgcHVibGljIGxvYWQgPSAwLFxuICAgIHB1YmxpYyBkZXZpY2VXaWR0aCA9IDAsXG4gICAgcHVibGljIGNhcm91c2VsV2lkdGggPSAwLFxuICAgIHB1YmxpYyBpdGVtV2lkdGggPSAwLFxuICAgIHB1YmxpYyBzbGlkZUl0ZW1zID0gMCxcbiAgICBwdWJsaWMgaXRlbVdpZHRoUGVyID0gMCxcbiAgICBwdWJsaWMgaXRlbUxlbmd0aCA9IDAsXG4gICAgcHVibGljIGN1cnJlbnRTbGlkZSA9IDAsXG4gICAgcHVibGljIGVhc2luZyA9ICdjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKScsXG4gICAgcHVibGljIHNwZWVkID0gMjAwLFxuICAgIHB1YmxpYyBsb29wID0gZmFsc2UsXG4gICAgcHVibGljIGRleFZhbCA9IDAsXG4gICAgcHVibGljIHRvdWNoVHJhbnNmb3JtID0gMCxcbiAgICBwdWJsaWMgaXNFbmQgPSBmYWxzZSxcbiAgICBwdWJsaWMgaXNGaXJzdCA9IHRydWUsXG4gICAgcHVibGljIGlzTGFzdCA9IGZhbHNlLFxuICAgIHB1YmxpYyBSVEwgPSBmYWxzZSxcbiAgICBwdWJsaWMgcG9pbnQgPSB0cnVlLFxuICAgIHB1YmxpYyB2ZWxvY2l0eSA9IDFcbiAgKSB7fVxufVxuZXhwb3J0IHR5cGUgRGV2aWNlVHlwZSA9ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ2FsbCc7XG5cbmV4cG9ydCB0eXBlIEJ1dHRvblZpc2libGUgPSAnZGlzYWJsZWQnIHwgJ2hpZGUnO1xuXG5leHBvcnQgY2xhc3MgSXRlbXNDb250cm9sIHtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBWZXJ0aWNhbCB7XG4gIGVuYWJsZWQ6IGJvb2xlYW47XG4gIGhlaWdodDogbnVtYmVyO1xuICAvLyBudW1IZWlnaHQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBOZ3VCdXR0b24ge1xuICB2aXNpYmlsaXR5PzogQnV0dG9uVmlzaWJsZTtcbiAgZWxhc3RpYz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFRvdWNoIHtcbiAgYWN0aXZlPzogYm9vbGVhbjtcbiAgc3dpcGU6IHN0cmluZztcbiAgdmVsb2NpdHk6IG51bWJlcjtcbn1cblxuLy8gSW50ZXJmYWNlIGlzIGRlY2xhcmVkIHRvIHByZXZlbnQgcHJvcGVydHktbWluaWZpY2F0aW9uXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS91aXVuaXZlcnNhbC9uZ3UtY2Fyb3VzZWwvaXNzdWVzLzMyMlxuZGVjbGFyZSBpbnRlcmZhY2UgVHJhbnNmb3JtSW50ZXJmYWNlIHtcbiAgeHM6IG51bWJlcjtcbiAgc206IG51bWJlcjtcbiAgbWQ6IG51bWJlcjtcbiAgbGc6IG51bWJlcjtcbiAgeGw/OiBudW1iZXI7XG4gIGFsbDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNmcm9tIGltcGxlbWVudHMgVHJhbnNmb3JtSW50ZXJmYWNlIHtcbiAgcHVibGljIHhsPyA9IDA7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB4cyA9IDAsIHB1YmxpYyBzbSA9IDAsIHB1YmxpYyBtZCA9IDAsIHB1YmxpYyBsZyA9IDAsIHB1YmxpYyBhbGwgPSAwKSB7fVxufVxuXG4vLyBJbnRlcmZhY2UgaXMgZGVjbGFyZWQgdG8gcHJldmVudCBwcm9wZXJ0eS1taW5pZmljYXRpb25cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VpdW5pdmVyc2FsL25ndS1jYXJvdXNlbC9pc3N1ZXMvMzIyXG5kZWNsYXJlIGludGVyZmFjZSBCcmVha3BvaW50c0ludGVyZmFjZSB7XG4gIHNtOiBudW1iZXI7XG4gIG1kOiBudW1iZXI7XG4gIGxnOiBudW1iZXI7XG4gIHhsOiBudW1iZXI7XG59XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZXNcbiAqIHtzbTogNzY4LCBtZDogOTkyLCBsZzogMTIwMCwgeGw6IDEyMDB9XG4gKlxuICogQm9vdHN0cmFwIHZhbHVlczpcbiAqIHtzbTogNTc2LCBtZDogNzY4LCBsZzogOTkyLCB4bDogMTIwMH1cbiAqL1xuZXhwb3J0IGNsYXNzIEJyZWFrcG9pbnRzIGltcGxlbWVudHMgQnJlYWtwb2ludHNJbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc20gPSA3NjgsIHB1YmxpYyBtZCA9IDk5MiwgcHVibGljIGxnID0gMTIwMCwgcHVibGljIHhsID0gMTIwMCkge31cbn1cblxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsQ29uZmlnIHtcbiAgZ3JpZDogVHJhbnNmcm9tO1xuICBncmlkQnJlYWtwb2ludHM/OiBCcmVha3BvaW50cztcbiAgc2xpZGU/OiBudW1iZXI7XG4gIHNwZWVkPzogbnVtYmVyO1xuICBpbnRlcnZhbD86IENhcm91c2VsSW50ZXJ2YWw7XG4gIGFuaW1hdGlvbj86IEFuaW1hdGU7XG4gIHBvaW50PzogUG9pbnQ7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIGxvYWQ/OiBudW1iZXI7XG4gIGN1c3RvbT86IEN1c3RvbTtcbiAgbG9vcD86IGJvb2xlYW47XG4gIHRvdWNoPzogYm9vbGVhbjtcbiAgZWFzaW5nPzogc3RyaW5nO1xuICBSVEw/OiBib29sZWFuO1xuICBidXR0b24/OiBOZ3VCdXR0b247XG4gIHZlcnRpY2FsPzogVmVydGljYWw7XG4gIHZlbG9jaXR5PzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBDdXN0b20gPSAnYmFubmVyJztcbmV4cG9ydCB0eXBlIEFuaW1hdGUgPSAnbGF6eSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQge1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBoaWRlT25TaW5nbGVTbGlkZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uIHtcbiAgdHlwZT86IEFuaW1hdGU7XG4gIGFuaW1hdGVTdHlsZXM/OiBBbmltYXRpb25TdHlsZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uU3R5bGVzIHtcbiAgc3R5bGU/OiBzdHJpbmc7XG4gIG9wZW4/OiBzdHJpbmc7XG4gIGNsb3NlPzogc3RyaW5nO1xuICBzdGFnZ2VyPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcm91c2VsSW50ZXJ2YWwge1xuICB0aW1pbmc6IG51bWJlcjtcbiAgaW5pdGlhbERlbGF5PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTmd1Q2Fyb3VzZWxPdXRsZXRDb250ZXh0PFQ+IHtcbiAgLyoqIERhdGEgZm9yIHRoZSBub2RlLiAqL1xuICAkaW1wbGljaXQ6IFQ7XG5cbiAgLyoqIERlcHRoIG9mIHRoZSBub2RlLiAqL1xuICBsZXZlbDogbnVtYmVyO1xuXG4gIC8qKiBJbmRleCBsb2NhdGlvbiBvZiB0aGUgbm9kZS4gKi9cbiAgaW5kZXg/OiBudW1iZXI7XG5cbiAgLyoqIExlbmd0aCBvZiB0aGUgbnVtYmVyIG9mIHRvdGFsIGRhdGFOb2Rlcy4gKi9cbiAgY291bnQ/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogVCkge1xuICAgIHRoaXMuJGltcGxpY2l0ID0gZGF0YTtcbiAgfVxufVxuIl19